{"version":3,"sources":["../src/datasource.js"],"names":["_","SignifaiServices","GenericDatasource","instanceSettings","$q","backendSrv","templateSrv","q","url","user_id","jsonData","secret","signifaiServices","options","Promise","resolve","reject","test","title","status","response","message","name","getMetricsSuggestions","getAttributesSuggestion"],"mappings":";;;;;;;;;;;;;;;AAAOA,O;;AACEC,sB,oBAAAA,gB;;;;;;;;;;;;;;;;;;;;;mCAEIC,iB;AAEX,mCAAYC,gBAAZ,EAA8BC,EAA9B,EAAkCC,UAAlC,EAA8CC,WAA9C,EAA2D;AAAA;;AACzD,eAAKC,CAAL,GAASH,EAAT;AACA,eAAKC,UAAL,GAAkBA,UAAlB;AACA,eAAKC,WAAL,GAAmBA,WAAnB;;AAEA;AACA,cAAME,MAAML,iBAAiBK,GAA7B;AACA,cAAMC,UAAUN,iBAAiBO,QAAjB,CAA0BD,OAA1C;AACA,cAAME,SAASR,iBAAiBO,QAAjB,CAA0BC,MAAzC;AACA,eAAKC,gBAAL,GAAwB,IAAIX,gBAAJ,CAAqBO,GAArB,EAA0BC,OAA1B,EAAmCE,MAAnC,CAAxB;AACD;;;;gCAEKE,O,EAAS;AACb,mBAAOC,QAAQC,OAAR,CAAgB,EAAhB,CAAP;AACD;;;2CAEgB;AAAA;;AACf,mBAAO,KAAKR,CAAL,CAAO,UAACQ,OAAD,EAAUC,MAAV,EAAqB;AACjC,oBAAKJ,gBAAL,CAAsBK,IAAtB,CAA2B,oBAAY;AACrCF,wBAAQ;AACNG,yBAAO,qBADD;AAENC,0BAAQC,SAASD,MAFX;AAGNE,2BAASD,SAASC;AAHZ,iBAAR;AAKD,eAND;AAOD,aARM,CAAP;AASD;;;4CAEiBC,I,EAAM;AACtB,gBAAMF,WAAW,KAAKR,gBAAL,CAAsBW,qBAAtB,CAA4CD,IAA5C,CAAjB;AACA,mBAAOR,QAAQC,OAAR,CAAgBK,QAAhB,CAAP;AACD;;;+CAEoBE,I,EAAM;AACzB,gBAAMF,WAAW,KAAKR,gBAAL,CAAsBY,uBAAtB,CAA8CF,IAA9C,CAAjB;AACA,mBAAOR,QAAQC,OAAR,CAAgBK,QAAhB,CAAP;AACD","file":"datasource.js","sourcesContent":["import _ from \"lodash\";\nimport { SignifaiServices } from './signifaiService';\n\nexport class GenericDatasource {\n\n  constructor(instanceSettings, $q, backendSrv, templateSrv) {\n    this.q = $q;\n    this.backendSrv = backendSrv;\n    this.templateSrv = templateSrv;\n\n    // SignifAI Services\n    const url = instanceSettings.url;\n    const user_id = instanceSettings.jsonData.user_id;\n    const secret = instanceSettings.jsonData.secret;\n    this.signifaiServices = new SignifaiServices(url, user_id, secret);\n  }\n\n  query(options) {\n    return Promise.resolve([]);\n  }\n\n  testDatasource() {\n    return this.q((resolve, reject) => {\n      this.signifaiServices.test(response => {\n        resolve({\n          title: \"SignifAI Datasource\",\n          status: response.status,\n          message: response.message\n        });\n      });\n    });\n  }\n\n  metricsSuggestion(name) {\n    const response = this.signifaiServices.getMetricsSuggestions(name);\n    return Promise.resolve(response);\n  }\n\n  attributesSuggestion(name) {\n    const response = this.signifaiServices.getAttributesSuggestion(name);\n    return Promise.resolve(response);\n  }\n}\n"]}