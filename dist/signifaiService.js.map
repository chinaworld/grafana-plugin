{"version":3,"sources":["../src/signifaiService.js"],"names":["dateFormat","crypto","SignifaiServices","url","user_id","secret","method","now","Date","signatureString","join","hash","HmacSHA256","replace","headers","concat","callback","request","data","namePrefix","response","code","status","message","params","xhr","XMLHttpRequest","open","getHeaders","setRequestHeader","onload","JSON","parse","send","stringify","name","size","from"],"mappings":"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","file":"signifaiService.js","sourcesContent":["import dateFormat from './libs/dateformat';\nimport crypto from './libs/hmac-sha256';\n\nexport class SignifaiServices {\n\n  constructor(url, user_id, secret) {\n    this.url = url;\n    this.user_id = user_id;\n    this.secret = secret;\n  }\n\n  /**\n   * Get Authorization Headers for SignifAI API\n   * @param {String} user_id \n   * @param {String} secret \n   * @param {String} method \n   * @returns {Object} headers\n   */\n  getHeaders(user_id, secret, method) {\n    const now = dateFormat(new Date(), \"GMT:ddd, dd mmm yyyy HH:MM:ss\") + \" GMT\";\n    const signatureString = [ method, user_id, '', 'application/json', now ].join(':');\n    const hash = crypto.HmacSHA256(signatureString, secret.replace('\\\\\"', '\"'));\n    const headers = {\n      'Content-Type': 'application/json',\n      'X-Signifai-Date': now,\n      'Authorization': 'signifai '.concat(user_id).concat(':').concat(hash)\n    };\n    return headers;\n  }\n\n  /**\n   * Test API Connection\n   * @param {Function} callback Callback function\n   * @returns {Object} Response { status, message }\n   */\n  test(callback) {\n    this.request({\n      method: 'POST',\n      url: this.url + '/metrics',\n      data: { namePrefix: '' }\n    }, response => {\n\n      if (404 === response.code) {\n        callback({ status: \"error\", message: \"Invalid URL\" });\n        return;\n      }\n\n      if (401 === response.code) {\n        callback({ status: \"error\", message: response.message });\n        return;\n      }\n\n      callback({ status: \"success\", message: \"Successfully connected to SignifAI\" });\n    });\n  }\n\n  /**\n   * Make SignifAI API Request\n   * @param {Object} params Request parameters (method, url, data)\n   * @param {Function} callback Callback function\n   */\n  request(params, callback) {\n    const method = params.method || 'GET';\n    const url = params.url || '';\n    const data = params.data || {};\n\n    const xhr = new XMLHttpRequest();\n    xhr.open(method, url);\n\n    const headers = this.getHeaders(this.user_id, this.secret, method);\n    xhr.setRequestHeader('Content-Type', headers['Content-Type']);\n    xhr.setRequestHeader('X-Signifai-Date', headers['X-Signifai-Date']);\n    xhr.setRequestHeader('Authorization', headers['Authorization']);\n\n    xhr.onload = () => { callback(JSON.parse(xhr.response)) };\n    xhr.send(JSON.stringify(data));\n  }\n\n  /**\n   * Suggest Metric Names\n   * @param {String} name Metric name for suggestion\n   * @returns {Array<String>} Array of suggested metrics\n   */\n  getMetricsSuggestions(name) {\n    this.request({\n        method: 'POST',\n        url: this.url + '/suggest/metrics',\n        data: {\n          namePrefix: name,\n          size: 10,\n          from: '-20d'\n        }\n      }, response => { return response; });\n  }\n\n  /**\n   * Suggest Attribute Names\n   * @param {String} name Attribute name for suggestion\n   * @returns {Array<String>} Array of suggested attributes\n   */\n  getAttributesSuggestion(name) {\n    this.request({\n      method: 'POST',\n      url: this.url + '/suggest/attributes',\n      data: {\n        namePrefix: name,\n        size: 10,\n        from: '-20d'\n      }\n    }, response => { return response });\n  }\n}"]}